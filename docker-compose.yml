
services:

  init_postgres_data:
    image: alpine
    command: sh -c "mkdir -p /data/postgres && chmod -R 777 /data/postgres"
    volumes:
      - ./data:/data
    networks:
      - transcendence
    restart: "no"
  postgres:
    image: postgres:latest
    container_name: postgres
    env_file:
      - .env
    ports:
      - "5432:5432"
    networks:
      - transcendence
    volumes:
      - ./data/postgres:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d transcendence"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 10s
    depends_on:
      - init_postgres_data

  backend_user:
    depends_on:
      postgres: {condition: service_healthy}
    container_name: backend_users
    build:
      context: .
      dockerfile: docker/backend_user/Dockerfile
    volumes:
      - ./users:/app
    ports:
      - "8001:8001"
    env_file:
      - .env
    networks:
      - transcendence
    restart: always

  backend_tournament:
    depends_on:
      - backend_user
    container_name: backend_tournament
    build:
      context: .
      dockerfile: docker/backend_tournament/Dockerfile
    volumes:
      - ./tournament:/app
    ports:
      - "8002:8002"
    env_file:
      - .env
    networks:
      - transcendence
    restart: always

  nginx:
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    container_name: nginx
    ports:
      - "3042:3042"
    volumes:
      - ./docker/nginx/frontend:/usr/share/nginx/frontend
      - ./users/media:/app/media
    networks:
      - transcendence
    restart: always
    depends_on:
      - backend_user
      - backend_tournament

networks:
  transcendence:
    name: transcendence
    driver: bridge

volumes:
  postgres_data:
    driver: local
    # driver_opts:
    #   type: none
    #   device: "./data/postgres"
    #   o: bind
